const { retrieval } = require("./queryEmbedder"); // G·ªçi ƒë·∫øn h√†m truy xu·∫•t context
const { answering } = require("./answerGen"); // G·ªçi ƒë·∫øn h√†m sinh c√¢u tr·∫£ l·ªùi
const { rewriteQuery } = require("./rewriteQuery"); // G·ªçi ƒë·∫øn h√†m rewriteQuery
// const {queryAgent} = require("./query_agent/agent"); // G·ªçi ƒë·∫øn h√†m queryAgent
async function queryPipeline(bussiness_detail, userQuestion, tenant_Id) {
  try {
    console.log("üß† Truy v·∫•n ng∆∞·ªùi d√πng:", userQuestion);

    // console.log("üîÑ ƒêang ch·ªânh s·ª≠a c√¢u h·ªèi...");
    // const rewrittenQuery = await rewriteQuery(bussiness_detail, userQuestion);
    // console.log("‚úçÔ∏è C√¢u h·ªèi ƒë√£ ch·ªânh s·ª≠a:", rewrittenQuery);

    // B∆∞·ªõc 1: Tr√≠ch xu·∫•t context t·ª´ Weaviate
    const context = await retrieval(
      tenant_Id,
      userQuestion,
       0.7
    );

    // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y context
    if (!context) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y context ph√π h·ª£p.");
      return { answer: "Kh√¥ng t√¨m th·∫•y th√¥ng tin.", isValid: false };
    }

    // B∆∞·ªõc 2: G·ª≠i context v√† c√¢u h·ªèi v√†o LLM
    var { answer, isValid } = await answering(
      tenant_Id,
      bussiness_detail,
      context,
      userQuestion
    );

    if(!isValid){
      const newQuery = await rewriteQuery(
        bussiness_detail,
        userQuestion,
        context,
        answer
      );
      console.log("‚úçÔ∏è C√¢u h·ªèi ƒë√£ ch·ªânh s·ª≠a:", newQuery);
      isValid = !newQuery.toUpperCase().includes("T√îI KH√îNG BI·∫æT");
      if(!isValid){
        console.log("‚ùå C√¢u h·ªèi kh√¥ng h·ª£p l·ªá sau khi ch·ªânh s·ª≠a.");
        return { answer: "T√îI KH√îNG BI·∫æT, T√îI S·∫º LI√äN H·ªÜ NH√ÇN VI√äN CON NG∆Ø·ªúI GI·∫¢I ƒê√ÅP CHO B·∫†N TRONG TH·ªúI GIAN S·ªöM NH·∫§T", isValid: false };
      }
      else {
        const newContext = await retrieval(
          tenant_Id,
          newQuery,
          0.3
        );
        // N·∫øu c√¢u h·ªèi h·ª£p l·ªá, g·ªçi l·∫°i h√†m answering v·ªõi c√¢u h·ªèi m·ªõi
        ({ answer, isValid } = await answering(
          tenant_Id,
          bussiness_detail,
          newContext,
          userQuestion
        ));
      }
    }

    // B∆∞·ªõc 3: X·ª≠ l√Ω k·∫øt qu·∫£
    console.log("\nüéØ K·∫øt qu·∫£ cu·ªëi c√πng:");
    if (isValid) {
      console.log("‚úÖ Tr·∫£ l·ªùi h·ª£p l·ªá:", answer);
    } else {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.");
    }

    return { answer, isValid };
  } 
  
  // try{
  //   const res = await queryAgent(bussiness_detail, userQuestion, tenant_Id);
  //   console.log("‚û°Ô∏è K·∫øt qu·∫£ t·ª´ agent:", res);
  //   return res;
  // }
  catch (err) {
    console.error("‚ùå L·ªói trong pipeline:", err.message);
    return { answer: "", isValid: false };
  }
}

// // V√≠ d·ª• ch·∫°y th·ª≠
// const readline = require("readline");
// const rl = readline.createInterface({
//   input: process.stdin,
//   output: process.stdout,
// });

// rl.question("üí¨ Nh·∫≠p c√¢u h·ªèi: ", async (input) => {
//   if (!input || input.trim() === "") {
//     console.log("‚ùå C√¢u h·ªèi kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
//   } else {
//     await queryPipeline(input);
//   }
//   rl.close();
// });

module.exports = { queryPipeline };
