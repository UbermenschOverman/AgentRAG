const { kafka } = require("../../config/kafka"); // Kafka connector
const { registry, escalatedMesSchema } = require("../../config/schemaRegistry"); // Schema registry client

const producer = kafka.producer();
async function escalatedMesProducer(tenantId, clientd, conversationId,input, text, requestId, escalatedReason, tag) {
  await producer.connect();
  try {
    // n·∫øu tag kh√¥ng trong 'khi·∫øu n·∫°i', 'h·ªèi ƒë√°p' th√¨ throw l·ªói
    if (!tag || (tag !== 'khi·∫øu n·∫°i' && tag !== 'h·ªèi ƒë√°p')) {
      throw new Error("Tag kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 'khi·∫øu n·∫°i' ho·∫∑c 'h·ªèi ƒë√°p'.");
    }
    const topic = "escalated_mes"; // T√™n topic ƒë·ªÉ g·ª≠i message
    const message = {
      tenantId: tenantId,
      conversationId: conversationId,
      clientId: clientd, // ID c·ªßa kh√°ch h√†ng
      escalatedReason: escalatedReason, // L√Ω do chuy·ªÉn ti·∫øp
      input: input, // C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
      text: text, // C√¢u tr·∫£ l·ªùi c·ªßa chatbot
      requestId: requestId, // ID c·ªßa y√™u c·∫ßu
      tag: tag, // Th√™m tr∆∞·ªùng tag ƒë·ªÉ ph√¢n lo·∫°i th√¥ng tin chuy·ªÉn ti·∫øp
    };
    // 2. M√£ h√≥a message theo schema
    const { id: schemaId } = await registry.register(escalatedMesSchema, { subject: "escalated_mes-value" }); // ƒêƒÉng k√Ω schema v√† l·∫•y schema ID
    const encodedMessage = await registry.encode(schemaId, message);

    // 3. G·ª≠i message ƒë√£ m√£ h√≥a v√†o Kafka
    await producer.send({
      topic: topic,
      messages: [
        {
          value: encodedMessage,
        },
      ],
    });

    console.log(`üöÄ Message sent to topic '${topic}' successfully.`);
  } catch (error) {
    throw new Error(`‚ùå Error sending message to Kafka: ${error.message}`);
  }
}

module.exports = { escalatedMesProducer };