// consumers/LLM_mesConsumer.js
const { runConsumer } = require("./consumer");
const conversation = require("../redis/data_structure/conversation_Store");
const client = require("../redis/data_structure/tenant_Client.js");
const cms = require("../redis/data_structure/claimed_Client.js");
const {buildContextOnSystemReply} = require("../utils/summaryGen");
async function rec_AnswerConsumer(io) {
  const topic = "rec_Answer"; // Topic c·∫ßn l·∫Øng nghe
  const groupId = "ws-rec_Answer-group-" + Date.now(); // GroupId cho consumer

  // Callback ƒë·ªÉ x·ª≠ l√Ω message
  const call_back = async (decodedMessage) => {
    try {
      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa decodedMessage
      const { tenantId, conversationId, input, text } = decodedMessage;

      // Ki·ªÉm tra t·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin c·∫ßn thi·∫øt
      if (!tenantId || !conversationId || !text) {
        console.error("‚ùå Missing required fields in message:", decodedMessage);
        return; // D·ª´ng x·ª≠ l√Ω n·∫øu thi·∫øu th√¥ng tin quan tr·ªçng
      }

      // T·∫°o ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn ƒë·ªÉ l∆∞u v√†o database
      const msgObj = {
        text: text ?? "", // N·∫øu kh√¥ng c√≥ text th√¨ ƒë·ªÉ l√† chu·ªói r·ªóng
        time: Date.now(), // Th·ªùi gian tin nh·∫Øn
        role: "LLM", // Ch·ªâ ƒë·ªãnh vai tr√≤ c·ªßa tin nh·∫Øn (LLM l√† bot)
      };
      // ki·ªÉm tra mode cua h·ªôi tho·∫°i
      const {mode} = await conversation.getMetaData(tenantId,conversationId);
      console.log(
        `üîç [${tenantId}] Processing message for conversation ${conversationId} with mode "${mode}"`
      );
      // n·∫øu mode l√† manual th√¨ g·ª≠i tin nh·∫Øn ƒë·∫øn CMS
      if (mode == "manual") {
        // L·∫•y th√¥ng tin cmsId t·ª´ conversation
        // g·ª≠i tin nh·∫Øn ƒë·∫øn CMS ƒëang claim client n√†y
        await cms.botToCms(io, tenantId, conversationId, msgObj);
      } else if (mode == "auto") {
              // Th√™m tin nh·∫Øn v√†o c∆° s·ªü d·ªØ li·ªáu cho conversation
        await conversation.addMessage(tenantId, conversationId, msgObj);
        // n·∫øu mode l√† auto th√¨ g·ª≠i tin nh·∫Øn ƒë·∫øn client v√† CMS
        await cms.botToCms(io, tenantId, conversationId, msgObj);
        await client.botToClient(io, tenantId, conversationId, msgObj);
        // c·∫≠p nh·∫≠t summary cho clientId n√†y
        await buildContextOnSystemReply(tenantId, conversationId, input, text);
      } else{
        console.error(`‚ùå Invalid mode "${mode}" for conversation ${conversationId} in tenant ${tenantId}`);
        return; // D·ª´ng x·ª≠ l√Ω n·∫øu mode kh√¥ng h·ª£p l·ªá
      }
    } catch (err) {
      console.error("‚ùå Error in callback processing message:", err);
    }
  };

  // Ch·∫°y consumer v·ªõi callback
  await runConsumer(topic, groupId, call_back);
}

module.exports = { rec_AnswerConsumer };
