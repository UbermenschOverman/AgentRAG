// // consumer.js
// const { kafka } = require("../config/kafka"); // Kafka connector
// const { registry, getSchemaIdByTopic } = require("../config/schemaRegistry"); // Schema registry client

// async function runConsumer(topic, groupId, call_back) {
//   const consumer = kafka.consumer({ groupId });

//   await consumer.connect();
//   await consumer.subscribe({ topic, fromBeginning: false });

//   console.log(
//     `üöÄ Listening for messages on topic '${topic}' with groupId '${groupId}'...`
//   );

//   await consumer.run({
//     eachMessage: async ({ topic, partition, message }) => {
//       try {
//         // 1. L·∫•y schema ID t·ª´ topic
//         const schemaId = getSchemaIdByTopic(topic);

//         // 2. Decode message t·ª´ Kafka v·ªõi schema ID l·∫•y ƒë∆∞·ª£c
//         const decoded = await registry.decode(message.value, schemaId);

//         console.log("üî• Received decoded message:", decoded);

//         // 3. G·ªçi callback v·ªõi message ƒë√£ decode
//         await call_back(decoded);
//       } catch (err) {
//         console.error("‚ùå Error decoding or processing message:", err);
//       }
//     },
//   });
// }

// async function runKeyConsumer(topic, topic_key, topic_value, groupId, call_back) {
//   const consumer = kafka.consumer({ groupId });

//   try {
//     await consumer.connect();
//     await consumer.subscribe({ topic, fromBeginning: false });

//     console.log(
//       `üöÄ Listening for messages on topic '${topic}' with groupId '${groupId}'...`
//     );

//     // L·∫•y schemaId m·ªôt l·∫ßn tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu consume
//     const schemaId_key = getSchemaIdByTopic(topic_key);
//     const schemaId_value = getSchemaIdByTopic(topic_value);

//     await consumer.run({
//       eachMessage: async ({ topic, partition, message }) => {
//         try {
//           const key = await registry.decode(message.key, schemaId_key);
//           const value = await registry.decode(message.value, schemaId_value);

//           console.log("üî• Received decoded message:", value, " : ", key);

//           await call_back(key, value);
//         } catch (err) {
//           console.error("‚ùå Error decoding or processing message:", err);
//         }
//       },
//     });
//   } catch (err) {
//     console.error(`‚ùå Failed to start consumer for topic '${topic}':`, err);
//   }
// }


// module.exports = { runConsumer,runKeyConsumer };

// consumer.js
const { kafka } = require("../config/kafka"); // Kafka connector
const { registry } = require("../config/schemaRegistry"); // Schema registry client - ch·ªâ c·∫ßn client, kh√¥ng c·∫ßn getSchemaIdByTopic

async function runConsumer(topic, groupId, call_back) {
  const consumer = kafka.consumer({ groupId });

  await consumer.connect();
  await consumer.subscribe({ topic, fromBeginning: false });

  console.log(
    `üöÄ Listening for messages on topic '${topic}' with groupId '${groupId}'...`
  );

  await consumer.run({
    eachMessage: async ({ topic, partition, message }) => {
      try {
        // KH√îNG C·∫¶N L·∫§Y schemaId T·ª™ TOPIC N·ªÆA
        // Th∆∞ vi·ªán registry.decode s·∫Ω t·ª± ƒë·ªông ƒë·ªçc schemaId t·ª´ message.value
        const decoded = await registry.decode(message.value); // Lo·∫°i b·ªè tham s·ªë schemaId

        // console.log("üî• Received decoded message:", decoded);

        await call_back(decoded);
      } catch (err) {
        console.error("‚ùå Error decoding or processing message:", err);
      }
    },
  });
}

async function runKeyConsumer(topic, groupId, call_back) { // Lo·∫°i b·ªè topic_key v√† topic_value
  const consumer = kafka.consumer({ groupId });

  try {
    await consumer.connect();
    await consumer.subscribe({ topic, fromBeginning: false });

    console.log(
      `üöÄ Listening for messages on topic '${topic}' with groupId '${groupId}'...`
    );

    // KH√îNG C·∫¶N L·∫§Y schemaId T·ª™ TOPIC N·ªÆA CHO KEY V√Ä VALUE
    // Th∆∞ vi·ªán registry.decode s·∫Ω t·ª± ƒë·ªông ƒë·ªçc schemaId t·ª´ message.key v√† message.value
    await consumer.run({
      eachMessage: async ({ topic, partition, message }) => {
        try {
          const key = await registry.decode(message.key);   // Lo·∫°i b·ªè tham s·ªë schemaId_key
          const value = await registry.decode(message.value); // Lo·∫°i b·ªè tham s·ªë schemaId_value

          console.log("üî• Received decoded message:", value, " : ", key);

          await call_back(key, value);
        } catch (err) {
          console.error("‚ùå Error decoding or processing message:", err);
        }
      },
    });
  } catch (err) {
    console.error(`‚ùå Failed to start consumer for topic '${topic}':`, err);
  }
}

module.exports = { runConsumer, runKeyConsumer };