const redis = require("../redisClient");
const { getDefaultMode } = require("../../tenent_service/tenantService.js");
const { connectDB } = require("../../config/mongo");

// trong n√†y c√≥ 2 ds l√† ConversationMap √°nh x·∫°  tenantId, clientId t·ªõi conversationId
// ‚úÖ Key builders c√≥ tenantId

const TTL_SECONDS = 3600 * 24;

const keyToConversationMeta = (tenantId, conversationId) => {
  if (!tenantId || !conversationId) {
    throw new Error("Thi·∫øu tenantId:", tenantId, "conversationId" ,conversationId);
  }
  return `tenant:${tenantId}:conversation:${conversationId}:meta`;
};
const keyToConversationContent = (tenantId, conversationId) =>
  `tenant:${tenantId}:conversation:${conversationId}:content`;

module.exports = {
  // üîç Ki·ªÉm tra client c√≥ conversation ch∆∞a
  // async hasConversation(tenantId, clientId) {
  //   return await redis.exists(getKeyToConversationId(tenantId, clientId));
  // },

  // üîÅ T·∫°o m·ªõi conversation n·∫øu ch∆∞a c√≥, tr·∫£ v·ªÅ conversationId
  // l∆∞u dict (tenantId, clientId) -> conversationId
  async ensureConvoForClient(tenantId, conversationId, clientId) {
    if (!tenantId || !conversationId || !clientId) {
      throw new Error("Thi·∫øu tenantId, conversationId ho·∫∑c clientId");
    }
    // Ki·ªÉm tra xem ƒë√£ c√≥ conversationId n√†y ch∆∞a
    const key = keyToConversationMeta(tenantId, conversationId);
    const exists = await redis.exists(key);
    const defaultMode = await getDefaultMode(tenantId);
    const database = await connectDB();
    const conversations = database.collection("conversations");
    if (!exists) {
      // l∆∞u v√†o convoMeta
      await redis.hSet(key, {
        clientId: clientId,
        cmsId: "",
        mode: defaultMode,
        EscalatedReq: "[]", // m·∫£ng escalateds r·ªóng
      });
      console.log(
        `[CONVERSATION] [${tenantId}] ƒê√£ t·∫°o conversation m·ªõi v·ªõi key ${key}: ${{
          clientId: clientId,
          cmsId: "",
          mode: defaultMode,
        }}`
      );
      // t√¨m ki·∫øm xem ƒë√£ c√≥ conversationId trong mongo ch∆∞a
      await conversations.updateOne(
        { clientId, tenantId, conversationId },
        {
          $setOnInsert: {
            clientId,
            tenantId,
            cmsId: "",
            conversationId: conversationId,
            date: new Date(),
            mode: defaultMode, // s·ª≠ d·ª•ng defaultMode t·ª´ tenantService
            message: [],
            summary: "",
          },
        },
        { upsert: true }
      );
    }
    return conversationId;
  },

  // üì® Th√™m tin nh·∫Øn m·ªõi v√†o h·ªôi tho·∫°i
  // l∆∞u h·ªôi tho·∫°i v·ªõi kh√≥a l√† conversationId
  // async addMessage(tenantId, clientId, message) {
  //   const conversationId = await this.ensureConversation(tenantId, clientId);
  //   const key = getKeytoConversationContent(tenantId, conversationId);
  //   console.log("Conversation_Store: ", message);
  //   const entry = JSON.stringify(message);
  //   await redis.rPush(key, entry);
  //   // Optional TTL (v√≠ d·ª•: 7 ng√†y)
  //   await redis.expire(key, 7 * 24 * 60 * 60);
  //   // add v√†o mongo
  //   await conversations.updateOne(
  //     { conversationId: conversationId },
  //     { $push: { message: message } }
  //   );
  // },

  async addMessage(tenantId, conversationId, message) {
    const key = keyToConversationContent(tenantId, conversationId);
    console.log("Conversation_Store: ", message);
    const entry = JSON.stringify(message);
    await redis.rPush(key, entry);
    // Optional TTL (v√≠ d·ª•: 7 ng√†y)
    await redis.expire(key, 7 * 24 * 60 * 60);
    const database = await connectDB();
    const conversations = database.collection("conversations");
    await conversations.updateOne(
      {
        conversationId: conversationId,
        tenantId: tenantId, // Th√™m ƒëi·ªÅu ki·ªán tenantId ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng h·ªôi tho·∫°i
      },
      { $push: { message: message } }
    );
  },

  // th√™m escalated request v√†o h·ªôi tho·∫°i
async addEscalatedRequest(tenantId, conversationId, escalatedRequest) {
  try {
    const key = keyToConversationMeta(tenantId, conversationId);
    const raw = await redis.hGet(key, "EscalatedReq");
    const parsedEscalatedReq = raw ? JSON.parse(raw) : [];

    // Ki·ªÉm tra tr√πng
    if (!parsedEscalatedReq.includes(escalatedRequest)) {
      parsedEscalatedReq.push(escalatedRequest);
      await redis.hSet(key, "EscalatedReq", JSON.stringify(parsedEscalatedReq));
      console.log(`[ESCALATED] [${tenantId}] Th√™m escalatedRequest ${requestStr} v√†o conversation ${conversationId}`);
    } else {
      console.log(`[ESCALATED] [${tenantId}] escalatedRequest ${requestStr} ƒë√£ t·ªìn t·∫°i trong conversation ${conversationId}`);
    }

    return true;
  } catch (err) {
    console.error("‚ùå Error adding escalated request:", err);
    return false;
  }
},

// l·∫•y danh s√°ch escalated request t·ª´ h·ªôi tho·∫°i
async getEscalatedRequests(tenantId, conversationId) {
  try {
    const key = keyToConversationMeta(tenantId, conversationId);
    const raw = await redis.hGet(key, "EscalatedReq");
    if (!raw) return []; // n·∫øu kh√¥ng c√≥ escalated request th√¨ tr·∫£ v·ªÅ m·∫£ng r·ªóng
    
    const escalatedRequests = JSON.parse(raw);
    // bi·∫øn c√°c string trong m·∫£ng th√†nh object n·∫øu c·∫ßn

    console.log(`[ESCALATED] [${tenantId}] L·∫•y danh s√°ch escalated requests t·ª´ conversation ${conversationId}:`, escalatedRequests);
    return escalatedRequests;
  } catch (err) {
    console.error("‚ùå Error getting escalated requests:", err);
    return [];
  }
},

// delete escalated request from conversation theo requestId
async deleteEscalatedRequest(tenantId, conversationId, requestId) {
  try {
    const key = keyToConversationMeta(tenantId, conversationId);
    const raw = await redis.hGet(key, "EscalatedReq");

    if (!raw) {
      console.log(`[ESCALATED] [${tenantId}] Kh√¥ng c√≥ escalated requests trong conversation ${conversationId}`);
      return false;
    }

    let parsedEscalatedRequests;

    try {
      parsedEscalatedRequests = JSON.parse(raw); // n√™n l√† m·∫£ng JSON
    } catch (err) {
      console.error("‚ùå Kh√¥ng parse ƒë∆∞·ª£c escalated requests t·ª´ Redis:", err);
      return false;
    }

    if (!Array.isArray(parsedEscalatedRequests)) {
      console.warn("‚ùó EscalatedReq kh√¥ng ph·∫£i l√† m·∫£ng.");
      return false;
    }

    // t√¨m index request c·∫ßn x√≥a
    const index = parsedEscalatedRequests.findIndex(req => req.requestId === requestId);
    if (index === -1) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y requestId ${requestId} trong escalated list.`);
      return false;
    }

    // x√≥a ph·∫ßn t·ª≠
    parsedEscalatedRequests.splice(index, 1);

    // ghi ƒë√® l·∫°i Redis
    await redis.hSet(key, "EscalatedReq", JSON.stringify(parsedEscalatedRequests));

    console.log(`‚úÖ ƒê√£ x√≥a escalated request ${requestId} trong conversation ${conversationId}`);
    return true;
  } catch (err) {
    console.error("‚ùå L·ªói trong deleteEscalatedRequest:", err);
    return false;
  }
},


  // üìú L·∫•y t·∫•t c·∫£ tin nh·∫Øn trong h·ªôi tho·∫°i
  async getMessages(tenantId, conversationId) {
    const contentKey = keyToConversationContent(tenantId, conversationId);
    const list = await redis.lRange(contentKey, 0, -1);
    return list.map((msg) => JSON.parse(msg));
  },

  // l·∫•y c√°c tin nh·∫Øn m·ªõi nh·∫•t m√† kh√¥ng ph·∫£i tin nh·∫Øn kh√°ch
  async getMessagesSinceLastUserMessage(tenantId, conversationId) {
    const contentKey = keyToConversationContent(tenantId, conversationId);
    const rawMessages = await redis.lRange(contentKey, 0, -1); // l·∫•y to√†n b·ªô l·ªãch s·ª≠

    const messages = rawMessages.map((msg) => JSON.parse(msg));

    const result = [];
    // Duy·ªát t·ª´ cu·ªëi danh s√°ch ng∆∞·ª£c v·ªÅ ƒë·∫ßu
    for (let i = messages.length - 1; i >= 0; i--) {
      const msg = messages[i];
      if (msg.role === "user" || msg.role === "client") {
        break; // G·∫∑p tin nh·∫Øn c·ªßa user th√¨ d·ª´ng l·∫°i (kh√¥ng l·∫•y)
      }
      result.unshift(msg); // Th√™m v√†o ƒë·∫ßu danh s√°ch
    }

    return result;
  },

  // // ‚ùå X√≥a/reset h·ªôi tho·∫°i
  // async clearConversation(tenantId, clientId) {
  //   const conversationId = await redis.get(
  //     getKeyToConversationId(tenantId, clientId)
  //   );
  //   if (conversationId) {
  //     await redis.del(getKeyToConversationId(tenantId, clientId));
  //     await redis.del(getKeytoConversationContent(tenantId, conversationId));
  //   }
  // },

  // l·∫•y th√¥ng tin h·ªôi tho·∫°i t·ª´ conversationId
  async getMetaData(tenantId, conversationId) {
    const key = keyToConversationMeta(tenantId, conversationId);
    const meta = await redis.hGetAll(key);
    // console.log("[getMetaData]", { key, meta });
    if (!meta || Object.keys(meta).length === 0) return null;
    return meta;
  },
  // // t√¨m clientId t·ª´ conversationId
  // async getClientIdFromConversationId(conversationId) {
  //   const meta = await redis.hGetAll(
  //     getKeyToConversationMetaData(conversationId)
  //   );
  //   if (!meta || !meta.clientId) return null;
  //   return meta.clientId;
  // },

  // // l·∫•y mode c·ªßa h·ªôi tho·∫°i
  // async getModeFromConversationId(conversationId) {
  //   const meta = await redis.hGet(
  //     getKeyToConversationMetaData(conversationId),
  //     "mode"
  //   );
  //   return meta ?? null;
  // },

  // chuy·ªÉn mode c·ªßa h·ªôi tho·∫°i
  async setModeToConversationId(tenantId, conversationId, mode) {
    // ki·ªÉm tra mode c√≥ h·ª£p l·ªá kh√¥ng
    const validModes = ["auto", "manual", "offChatbot"];
    if (!validModes.includes(mode)) {
      throw new Error(
        `Mode kh√¥ng h·ª£p l·ªá: ${mode}. Ch·ªâ ch·∫•p nh·∫≠n ${validModes.join(", ")}`
      );
    }
    await redis.hSet(keyToConversationMeta(tenantId, conversationId), { mode });
    // c·∫≠p nh·∫≠t mode trong db
    const database = await connectDB();
    const conversations = database.collection("conversations");
    await conversations.updateOne(
      { conversationId: conversationId },
      { $set: { mode: mode } }
    );
    return mode;
  },

  // c·∫≠p nh·∫≠t th√¥ng tin h·ªôi tho·∫°i
  async update(tenantId, conversationId, updatedObject = {}) {
    const key = keyToConversationMeta(tenantId, conversationId);
    await redis.hSet(key, updatedObject);
    // c·∫≠p nh·∫≠t th√¥ng tin trong db
    const database = await connectDB();
    const conversations = database.collection("conversations");
    await conversations.updateOne(
      { conversationId: conversationId, tenantId: tenantId }, // Th√™m ƒëi·ªÅu ki·ªán tenantId ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng h·ªôi tho·∫°i
      { $set: updatedObject }
    );
  },
};
