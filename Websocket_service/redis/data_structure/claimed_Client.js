// utils/claimedClients.js
const redis = require("../redisClient");
const client = require("./tenant_Client")
const conversation = require("./conversation_Store");
const keyToCmsData = (tenantId, sessionId) =>
  `tenant:${tenantId}:cmsId:${sessionId}`;

module.exports = {
  // ‚úÖ Thi·∫øt l·∫≠p client r·ªóng cho CMS m·ªõi v√†o (ch∆∞a claim ai)
  async init(tenantId, sessionId, cmsSocketId) {
    const key = keyToCmsData(tenantId, sessionId);
    // t√¨m xem ƒë√£ c√≥ b·∫£n ghi claim n√†o ch∆∞a
    const exists = await redis.exists(key);
    if (exists) {
      // N·∫øu ƒë√£ c√≥ th√¨ kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t socketId
      await redis.hSet(key, { cmsSocketId: cmsSocketId });
      await redis.persist(key); // ƒê·∫£m b·∫£o key kh√¥ng b·ªã x√≥a sau khi restart Redis
    }
    else {
      await redis.hSet(key,{ 
      clientId: "", // Ch∆∞a claim ai
      cmsSocketId: cmsSocketId, // L∆∞u socketId c·ªßa CMS
      conversationId: "", // Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o
    });
    console.log(
      `[CMS_INIT] [${tenantId}] CMS ${sessionId} initialized with socketId ${cmsSocketId}`
    );
    }
    return cmsSocketId;

  },

  // ‚úÖ Ghi ƒë√®/ghi m·ªõi clientId m√† CMS n√†y ƒëang claim
  async claim(tenantId, sessionId, clientId) {
     const key = keyToCmsData(tenantId, sessionId);
     // ƒëi·ªÅu ki·ªán ƒë·ªÉ claim: b·∫£n th√¢n ch∆∞a claim ai, kh√°ch ch∆∞a ƒë∆∞·ª£c claim b·ªüi ai
     // ƒëi·ªÅu ki·ªán 1: b·∫£n th√¢n ch∆∞a claim ai
     const { clientId: currentClient } = await this.getCmsDetail(tenantId, sessionId);

     if (currentClient?.trim()&& currentClient !== clientId) {
       return new Error(`CMS already claimed client ${currentClient}`);
     }
     // ƒëi·ªÅu ki·ªán 2: kh√°ch ch∆∞a ƒë∆∞·ª£c claim b·ªüi ai
    const {isClaim, cmsId} = await client.getClientData(tenantId, clientId);
    if (isClaim!=0&& cmsId!== sessionId) {
      return new Error(`Client ${clientId} is already claimed by CMS ${cmsId}`);
    }
    // th·ª±c hi·ªán claim = c√°ch g·ªçi gettingClaimed c·ªßa kh√°ch v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i n·ªôi b·ªô
    // g·ªçi h√†m gettingClaimed c·ªßa kh√°ch
    const conversationId = await client.gettingClaimed(tenantId, clientId, sessionId);
    // cap nhat clientId v√† conversationId cho CMS
    await redis.hSet(key, {clientId: clientId, 
      conversationId: conversationId || "", // N·∫øu c√≥ cu·ªôc tr√≤ chuy·ªán th√¨ l∆∞u, n·∫øu kh√¥ng th√¨ ƒë·ªÉ r·ªóng
    });
    console.log(
      `[CMS_CLAIM] [${tenantId}] CMS ${sessionId} claimed client ${clientId} with conversation ${conversationId}`
    );
    return conversationId
  },

  // unclaim clientId m√† CMS ƒëang claim
  async unclaim (tenantId, sessionId){
    const key = keyToCmsData(tenantId, sessionId);
    const {clientId} = await redis.hGetAll(key);
    // n·∫øu c√≥ clientId th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ ch∆∞a claim
    if (clientId?.trim()) { // c·∫≠p nh·∫≠y b·∫£ng client
      await client.gettingUnclaimed(tenantId, clientId);
    }
    // c·∫≠p nh·∫≠t b·∫£n th√¢n(b·∫£ng cms)
    await redis.hSet(key, {clientId: "", 
      conversationId: "", 
    });
    return clientId; // Tr·∫£ v·ªÅ clientId ƒë√£ unclaim
  },

  // ‚úÖ L·∫•y clientId m√† CMS ƒëang claim (n·∫øu c√≥)
  async getCmsDetail(tenantId, sessionId) {
    const key = keyToCmsData(tenantId, sessionId);
    const value = await redis.hGetAll(key);
    return value || null; // Tr·∫£ v·ªÅ clientId ho·∫∑c null n·∫øu kh√¥ng c√≥
  },

  // // ‚úÖ L·∫•y socketId c·ªßa CMS ƒëang claim clientId
  // async getSocketId(tenantId, sessionId) {
  //   const key = getClaimKey(tenantId, sessionId);
  //   const value = await redis.hGet(key, "cmsSocketId");
  //   return value || null; // Tr·∫£ v·ªÅ socketId ho·∫∑c null n·∫øu kh√¥ng c√≥
  // },
  // ‚úÖ X√≥a b·∫£n ghi khi CMS disconnect ho·∫∑c tho√°t
  async clear(tenantId, sessionId) {
    const key = keyToCmsData(tenantId, sessionId);
    // l·∫•y th√¥ng tin clientId hi·ªán t·∫°i
    const {clientId, conversationId} = await redis.hGetAll(key);
    // n·∫øu c√≥ clientId th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ ch∆∞a claim
    if(clientId?.trim()){
      await client.gettingUnclaimed(tenantId, clientId);
    }
    // set ttl c·ªßa key v·ªÅ 5s;
    await redis.expire(key, 5);
    
  },
  async update(tenantId, sessionId, updatedObject = {}) {
    const key = keyToCmsData(tenantId, sessionId);
    await redis.hSet(key, updatedObject);
  },
  // g·ª≠i tin nh·∫Øn t·ª´ cms t·ªõi client
  async CMStoClient(io,tenantId, sessionId, msgObj) {
    // l·∫•y th√¥ng tin clientId ƒëang claim
    const {clientId} = await this.getCmsDetail(tenantId, sessionId);
    if (!(clientId?.trim())) {
      return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y clientId cho sessionId: ${sessionId}`);
    }
    // l·∫•y socketId c·ªßa client t·ª´ clientId
    const {wsId} = await client.getClientData(tenantId, clientId);
    if (!(wsId?.trim())) {
      return console.warn(
        `[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y socketId c·ªßa client: ${clientId}`
      );
    }
    // g·ª≠i s·ª± ki·ªán t·ªõi client qua WebSocket
    io.of("/client").to(wsId).emit("cms_message", msgObj);
    console.log(
      `[CMS_MESSAGE] [${tenantId}] üí¨ CMS ${sessionId} g·ª≠i message ƒë·∫øn client ${clientId} v·ªõi socket: ${clientId}`
    );
  },
  // g·ª≠i s·ª± ki·ªán t·ª´ client t·ªõi CMS
  async clientToCms(io, tenantId, clientId, msgObj) {
    // l·∫•y th√¥ng tin v·ªÅ cms ƒëang ph·ª• t√°ch c·ªßa client
    const {cmsId,wsId} = await client.getClientData(tenantId, clientId);
    if (!(cmsId?.trim())) {
      return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y CMS cho clientId: ${clientId}`);
    }
    // l·∫•y socketId c·ªßa CMS t·ª´ cmsId
    const {cmsSocketId} = await this.getCmsDetail(tenantId, cmsId);
    if (!(cmsSocketId?.trim())) {
      return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y socketId c·ªßa CMS: ${cmsId}`);
    }
    // g·ª≠i s·ª± ki·ªán t·ªõi CMS qua WebSocket
    io.of("/cms").to(cmsSocketId).emit("client_message", msgObj);
    console.log(`[client_message] Message sent to CMS: ${cmsSocketId}`);
  },
  // async findCMSByClient(tenantId, clientId){
  //   const {isClaim, cmsId} = await client.getClaimInfo(tenantId, clientId);
  //   const cmsSocket = await getSocketId(tenantId, cmsId);
  //   return cmsSocket
  // },

   // g·ª≠i tin nh·∫Øn t·ªõi cms khi c√≥ conversation Id
  async botToCms (io,tenantId, conversationId, msgObj) {
    const {cmsId}= await conversation.getMetaData(tenantId, conversationId);
    if(!(cmsId?.trim())){return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y CMS cho conversationId: ${conversationId}`);}
    // l·∫•y socketId c·ªßa CMS t·ª´ cmsId
    const {cmsSocketId} = await this.getCmsDetail(tenantId, cmsId);
    if (!(cmsSocketId?.trim())) {
      return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y socketId c·ªßa CMS: ${cmsId}`);
    }
    // g·ª≠i s·ª± ki·ªán t·ªõi CMS qua WebSocket
    io.of("/cms").to(cmsSocketId).emit("bot_rec_message", msgObj);
    console.log(`[bot_rec_message] Message sent to CMS: ${cmsId}, socketId: ${cmsSocketId}`);
  },
    // g·ª≠i tin nh·∫Øn t·ªõi cms khi c√≥ conversation Id
  async botToCmsOrder (io,tenantId, conversationId, msgObj) {
    const {cmsId}= await conversation.getMetaData(tenantId, conversationId);
    if(!(cmsId?.trim())){return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y CMS cho conversationId: ${conversationId}`);}
    // l·∫•y socketId c·ªßa CMS t·ª´ cmsId
    const {cmsSocketId} = await this.getCmsDetail(tenantId, cmsId);
    if (!(cmsSocketId?.trim())) {
      return console.warn(`[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y socketId c·ªßa CMS: ${cmsId}`);
    }
    // g·ª≠i s·ª± ki·ªán t·ªõi CMS qua WebSocket
    io.of("/cms").to(cmsSocketId).emit("orderQueue", msgObj);
     console.log(`[orderQueue] Message sent to CMS: ${cmsId}`);
  },
  async hasCMS (tenantId, sessionId) {
    const key = keyToCmsData(tenantId, sessionId);
    const exists = await redis.exists(key);
    return exists > 0; // Tr·∫£ v·ªÅ true n·∫øu c√≥ b·∫£n ghi, false n·∫øu kh√¥ng
  }
};
