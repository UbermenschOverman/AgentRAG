const redis = require("../redisClient");
const { connectDB } = require("../../config/mongo");
const conversation = require("./conversation_Store");
const crypto = require("crypto");

let db = null;

// H√†m l·∫•y k·∫øt n·ªëi, ch·ªâ connect 1 l·∫ßn
async function getDb() {
  if (!db) {
    db = await connectDB();
  }
  return db;
}

const clientKey = (tenantId, clientId) =>
  `tenant:${tenantId}:client:${clientId}`;
const TTL_SECONDS = 3600 * 24; // 24 gi·ªù

/**
 * Th√™m clientId ri√™ng bi·ªát v·ªõi TTL cho tenant, ƒë·ªìng th·ªùi l∆∞u platform
 */

// ki·ªÉm tra ƒë·∫ßu ti√™n ·ªü redis n·∫øu kh√¥ng c√≥ th√¨ ki·ªÉm tra ·ªü mongoDB
/**
 * ki·ªÉm tra exist_in_redis, exist_in_mongoDB
 * n·∫øu exist_in_redis && exist_in_mongoDB th√¨ c·∫≠p nh·∫≠t l·∫°i TTL v√† socketId
 * n·∫øu exist_in_redis==false && exist_in_mongoDB==true th√¨ t·∫°o entry m·ªõi trong redis
 * n·∫øu exist_in_redis==true && exist_in_mongoDB==false th√¨ b√°o l·ªói
 * n·∫øu exist_in_redis==false && exist_in_mongoDB==false th√¨ t·∫°o entry m·ªõi trong mongoDB v√† redis
 * tr·∫£ v·ªÅ
 */
async function ensureClient(tenantId, clientId, platform, socketId) {
  // ki·ªÉm tra trong redis
  const key = clientKey(tenantId, clientId);
  const exist_in_redis = await redis.exists(clientKey(tenantId, clientId));
  // ki·ªÉm tra trong mongoDB
  const database = await getDb();
  const clientsCollection = database.collection("clients");
  const exist_in_mongoDB = await clientsCollection.findOne({
    tenantId,
    clientId,
  });
  if (clientsCollection && exist_in_mongoDB) {
    await redis.expire(key, TTL_SECONDS);
    await redis.hSet(key, { wsId: socketId });
    return; // N·∫øu ƒë√£ c√≥ th√¨ kh√¥ng th√™m n·ªØa
  }
  if (exist_in_mongoDB && !exist_in_redis) {
    await redis.hSet(key, {
      platform: platform,
      wsId: socketId,
      summary: "Summary tr·ªëng",
      isClaim: 0, // ch∆∞a claim
      cmsId: "", // ch∆∞a c√≥ cmsId
      conversationId: "", // ch∆∞a c√≥ conversationId
      orders: "[]", // m·∫£ng orderIds r·ªóng
      escalatedIds: "[]", // m·∫£ng escalatedIds r·ªóng
    });
    await redis.expire(key, TTL_SECONDS);
    return;
  }
  if (!exist_in_mongoDB && !exist_in_redis) {
    // n·∫øu kh√¥ng c√≥ trong redis v√† mongoDB th√¨ t·∫°o m·ªõi
    await redis.hSet(key, {
      platform: platform,
      wsId: socketId,
      summary: "Summary tr·ªëng",
      isClaim: 0, // ch∆∞a claim
      cmsId: "", // ch∆∞a c√≥ cmsId
      conversationId: "", // t·∫°o m·ªõi conversationId
      orders: "[]", // m·∫£ng orderIds r·ªóng
      escalatedIds: "[]", // m·∫£ng escalatedIds r·ªóng
    });
    await redis.expire(key, TTL_SECONDS);
    // th√™m v√†o mongoDB
    const database = await getDb();
    const clientsCollection = database.collection("clients");
    const newClient = {
      clientId,
      tenantId,
      name: "",
      phoneNumber: "",
      conversations: [],
      orders: [],
      interestedProducts: [],
      customerCharacteristics: [],
      lastSeen: Date.now(),
      createdAt: Date.now(),
    };
    await clientsCollection.insertOne(newClient);
    console.log(
      `[CLIENT] [${tenantId}] ƒê√£ t·∫°o client m·ªõi cho client ${clientId} `
    );
    return;
  }
  if (!exist_in_mongoDB && exist_in_redis) {
    // n·∫øu c√≥ trong redis nh∆∞ng kh√¥ng c√≥ trong mongoDB th√¨ b√°o l·ªói
    throw new Error(
      `[CLIENT] [${tenantId}] ‚ùå Client ${clientId} ƒë√£ t·ªìn t·∫°i trong Redis nh∆∞ng kh√¥ng t√¨m th·∫•y trong MongoDB`
    );
  }
}

/**
 * Ensure conversationId
 */
async function ensureConversation(tenantId, clientId) {
  // check ƒë·∫ßu v√†o
  if (!tenantId?.trim() || !clientId?.trim()) {
    throw new Error("Thi·∫øu tenantId ho·∫∑c clientId");
  }
  const key = clientKey(tenantId, clientId);
  const { conversationId } = await redis.hGetAll(key);
  if (!conversationId?.trim()) {
    const convoId = crypto.randomUUID();
    await conversation.ensureConvoForClient(tenantId, convoId, clientId);
    await redis.hSet(key, { conversationId: convoId });
    console.log(
      `[CONVERSATION] [${tenantId}] ƒê√£ t·∫°o conversationId m·ªõi cho client ${clientId}: ${convoId}`
    );
    // add v√†o m·∫£ng conversations trong mongoDB
    const database = await getDb();
    const clientsCollection = database.collection("clients");
    await clientsCollection.updateOne(
      { tenantId, clientId },
      { $addToSet: { conversations: convoId } }
    );
    return convoId;
  }
  return conversationId;
}
/**
 * X√≥a m·ªÅm clientId kh·ªèi redis b·∫±ng c√°ch set TTL v·ªÅ 5 ph√∫t
 */
async function removeClient(tenantId, clientId) {
  const key = clientKey(tenantId, clientId);
  await redis.expire(key, 30); // set TTL v·ªÅ 30 gi√¢y
}

/**
 * Ki·ªÉm tra clientId c√≥ trong  mongoDB v√† redis hay kh√¥ng, n·∫øu c√≥ ·ªü mongoDB th√¨ tr·∫£ v·ªÅ false
 */
async function hasClient(tenantId, clientId) {
  const key = clientKey(tenantId, clientId);
  const exists = await redis.exists(key);
  console.log(
    "ki·ªÉm tra t·ªìn t·∫°i trong redis",
    tenantId,
    clientId,
    "exists:",
    exists,
    "key:",
    key
  );
  if (exists) {
    await redis.expire(key, TTL_SECONDS); // reset TTL
    return true;
  }
  return false;
}

/**
 * L·∫•y th√¥ng tin c·ªßa client
 */
async function getClientData(tenantId, clientId) {
  const key = clientKey(tenantId, clientId);
  return await redis.hGetAll(key);
}
/**
 * c√¢p nh·∫≠t
 */
async function update(tenantId, clientId, conversationId, updatedObject = {}) {
  const database = await getDb();
  const conversations = database.collection("conversations");
  const key = clientKey(tenantId, clientId);
  await redis.hSet(key, updatedObject);
  await conversations.updateOne(
    { conversationId: conversationId },
    { $set: updatedObject }
  );
}
/**
 * claimed
 */
async function gettingClaimed(tenantId, clientId, cmsId) {
  // th·ª±c hi·ªán chu·∫©n b·ªã cho vi·ªác ƒë∆∞·ª£c claim, b∆∞·ªõc 1: update tr·∫°ng th√°i n·ªôi b·ªô, b∆∞·ªõc 2: c·∫≠p nh·∫≠t h·ªôi tho·∫°i c·ªßa kh√°ch n√†y
  // b∆∞·ªõc 1: c·∫≠p nh·∫≠t tr·∫°ng th√°i n·ªôi b·ªô
  const key = clientKey(tenantId, clientId);
  await redis.hSet(key, {
    isClaim: 1,
    cmsId: cmsId,
  });
  // b∆∞·ªõc 2: c·∫≠p nh·∫≠t h·ªôi tho·∫°i c·ªßa kh√°ch n√†y
  const conversationId = await ensureConversation(tenantId, clientId);
  await conversation.update(tenantId, conversationId, {
    cmsId: cmsId,
  });
  return conversationId;
}
/**
 * unclaimed
 */
async function gettingUnclaimed(tenantId, clientId) {
  // th·ª±c hi·ªán unclaim, b∆∞·ªõc 1: c·∫≠p nh·∫≠t tr·∫°ng th√°i n·ªôi b·ªô, b∆∞·ªõc 2: c·∫≠p nh·∫≠t h·ªôi tho·∫°i c·ªßa kh√°ch n√†y
  const key = clientKey(tenantId, clientId);
  await redis.hSet(key, {
    isClaim: 0,
    cmsId: "",
  });
  const conversationId = await ensureConversation(tenantId, clientId);
  conversation.update(tenantId, conversationId, {
    cmsId: "",
  });
  return conversationId;
}
/**
 * G·ª≠i tin nh·∫Øn cho client khi bi·∫øt conversationId
 */
async function botToClient(io, tenantId, conversationId, msgObj) {
  const { clientId } = await conversation.getMetaData(tenantId, conversationId);
  const { platform } = await getClientData(tenantId, clientId);
  if (!clientId?.trim()) {
    return console.warn(
      `[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y clientId cho conversationId: ${conversationId}`
    );
  }
  // l·∫•y socketId c·ªßa client t·ª´ clientId
  const { wsId } = await getClientData(tenantId, clientId);
  if (!wsId?.trim()) {
    return console.warn(
      `[CMS_MESSAGE] [${tenantId}] Kh√¥ng t√¨m th·∫•y socketId c·ªßa client: ${clientId}`
    );
  }
  // ki·ªÉm tra mode c·ªßa client
  if (platform === "web") {
    // g·ª≠i s·ª± ki·ªán t·ªõi client qua WebSocket
    io.of("/client").to(wsId).emit("cms_message", msgObj);
    console.log(
      `[CMS_MESSAGE] [${tenantId}] üí¨ Bot g·ª≠i message ƒë·∫øn client ${clientId}`
    );
    return;
  } else if (platform === "facebook") {
    // g·ª≠i tin nh·∫Øn ƒë·∫øn facebook
    console.log(
      `[CMS_MESSAGE] [${tenantId}] G·ª≠i tin nh·∫Øn ƒë·∫øn facebook client ${clientId} : `,
      msgObj
    );
  } else {
    throw new Error(
      `[CMS_MESSAGE] [${tenantId}] ‚ùå Kh√¥ng h·ªó tr·ª£ platform ${platform} cho client ${clientId}`
    );
  }
}

// th√™m orderId v√†o m·∫£ng orders c·ªßa client
async function addOrderIdToClient(tenantId, clientId, orderId) {
  if (!tenantId?.trim() || !clientId?.trim() || !orderId?.trim()) {
    throw new Error("Thi·∫øu tenantId, clientId ho·∫∑c orderId");
  }
  const key = clientKey(tenantId, clientId);
  // l·∫•y m·∫£ng orders hi·ªán t·∫°i
  const raworders = await redis.hGet(key, "orders"); // hget l√†
  const orders = raworders ? JSON.parse(raworders) : [];
  // ki·ªÉm tra n·∫øu orderId kh√¥ng ƒë∆∞·ª£c include trong m·∫£ng orders th√¨ ƒë·∫©y v√†o
  if (!orders.includes(orderId)) {
    await redis.hSet(key, {
      orders: JSON.stringify([...orders, orderId]),
    });
    console.log(
      `[ORDER] [${tenantId}] ƒê√£ th√™m orderId ${orderId} v√†o client ${clientId}`
    );
  }
}

async function addEscalatedToClient(
  tenantId,
  clientId,
  conversationId,
  escalatedReq
) {
  if (
    !tenantId?.trim() ||
    !clientId?.trim() ||
    !escalatedReq?.requestId?.trim()
  ) {
    throw new Error("Thi·∫øu tenantId, clientId ho·∫∑c escalatedReq.requestId");
  }

  try {
    const { requestId } = escalatedReq;

    // Th√™m requestId v√†o escalatedIds c·ªßa client
    const key = clientKey(tenantId, clientId);
    const rawEscalatedIds = await redis.hGet(key, "escalatedIds");
    const escalatedIds = rawEscalatedIds ? JSON.parse(rawEscalatedIds) : [];

    if (!escalatedIds.includes(requestId)) {
      escalatedIds.push(requestId);
      await redis.hSet(key, { escalatedIds: JSON.stringify(escalatedIds) });
      console.log(
        `[ESCALATED] [${tenantId}] ƒê√£ th√™m escalatedId ${requestId} v√†o client ${clientId}`
      );
    } else {
      console.log(
        `[ESCALATED] [${tenantId}] escalatedId ${requestId} ƒë√£ t·ªìn t·∫°i trong client ${clientId}`
      );
    }

    // Th√™m n·ªôi dung escalatedReq v√†o conversation (d√πng clientId nh∆∞ conversationId ·ªü ƒë√¢y)
    await conversation.addEscalatedRequest(
      tenantId,
      conversationId,
      escalatedReq
    );
  } catch (err) {
    console.error(
      `[ESCALATED] [${tenantId}] ‚ùå L·ªói khi th√™m escalatedId v√†o client ${clientId}:`,
      err
    );
    throw err;
  }
}

// remove escalated id
async function removeEscalatedFromClient(tenantId, clientId, requestId) {
  try {
    console.log(
      `[ESCALATED] [${tenantId}] B·∫Øt ƒë·∫ßu x√≥a escalatedId ${requestId} kh·ªèi client ${clientId}`
    );
    if (!tenantId?.trim() || !clientId?.trim() || !requestId?.trim()) {
      throw new Error("Thi·∫øu tenantId, clientId ho·∫∑c requestId");
    }

    const key = clientKey(tenantId, clientId);
    const rawEscalatedIds = await redis.hGet(key, "escalatedIds");
    const conversationId = await redis.hGet(key, "conversationId");
    const escalatedIds = rawEscalatedIds ? JSON.parse(rawEscalatedIds) : [];

    if (!Array.isArray(escalatedIds)) {
      console.warn(
        `[ESCALATED] [${tenantId}] Tr∆∞·ªùng escalatedIds c·ªßa client ${clientId} kh√¥ng ph·∫£i l√† m·∫£ng. B·ªè qua b∆∞·ªõc x√≥a Redis.`
      );
    } else if (escalatedIds.includes(requestId)) {
      const updatedEscalatedIds = escalatedIds.filter((id) => id !== requestId);
      await redis.hSet(key, {
        escalatedIds: JSON.stringify(updatedEscalatedIds),
      });
      console.log(
        `[ESCALATED] [${tenantId}] ƒê√£ x√≥a requestId ${requestId} kh·ªèi escalatedIds c·ªßa client ${clientId}`
      );
    } else {
      console.log(
        `[ESCALATED] [${tenantId}] requestId ${requestId} kh√¥ng t·ªìn t·∫°i trong escalatedIds c·ªßa client ${clientId}`
      );
    }

    // X√≥a request kh·ªèi conversation
    const deleted = await conversation.deleteEscalatedRequest(
      tenantId,
      conversationId,
      requestId
    );
    if (deleted) {
      console.log(
        `[ESCALATED] [${tenantId}] ƒê√£ x√≥a escalated request ${requestId} kh·ªèi conversation c·ªßa client ${clientId}`
      );
    } else {
      console.log(
        `[ESCALATED] [${tenantId}] escalated request ${requestId} kh√¥ng t·ªìn t·∫°i trong conversation c·ªßa client ${clientId}`
      );
    }
  } catch (err) {
    console.error(
      `[ESCALATED] [${tenantId}] ‚ùå L·ªói khi x√≥a escalatedId kh·ªèi client ${clientId}:`,
      err
    );
    throw err;
  }
}

async function getEscalatedRequests(tenantId, clientId) {
  if (!tenantId || !clientId) {
    throw new Error("Thi·∫øu tenantId ho·∫∑c clientId");
  }
  const key = clientKey(tenantId, clientId);
  const conversationId = await redis.hGet(key, "conversationId");
  if (!conversationId) {
    throw new Error(
      `[ESCALATED] [${tenantId}] Kh√¥ng t√¨m th·∫•y conversationId cho client ${clientId}`
    );
  }
  const escalatedRequests = await conversation.getEscalatedRequests(
    tenantId,
    conversationId
  );
  return escalatedRequests || [];
}
async function getAllClients(tenantId) {
  const key = `tenant:${tenantId}:client:*`;
  const clientKeys = await redis.keys(key);
  // lo·∫°i b·ªè ti·ªÅn t·ªë `tenant:${tenantId}:client:` ƒë·ªÉ l·∫•y clientId
  for (let i = 0; i < clientKeys.length; i++) {
    clientKeys[i] = clientKeys[i].replace(`tenant:${tenantId}:client:`, "");
  }
  return clientKeys;
}
/**
 * G·ª≠i tin nh·∫Øn t·ªõi cms ƒëang claim clientId
 */
//   async function clientToCMS(io, tenantId, clientId, msgObj) {
//   const {cmsId} = await getClientData(tenantId, clientId);
//   if(!(cmsId?.trim())) {
//     console.warn(`[CLIENT_TO_CMS] [${tenantId}] ‚ùå Kh√¥ng t√¨m th·∫•y CMS ƒëang claim client ${clientId}`);
//     return;
//   }
//   // l·∫•y socketId c·ªßa CMS
//   const {cmsSocket}= await cms.getCmsDetail(tenantId, cmsId);
//   if(!(cmsSocket?.trim())) {
//     console.warn(`[CLIENT_TO_CMS] [${tenantId}] ‚ùå Kh√¥ng t√¨m th·∫•y socketId c·ªßa CMS ${cmsId}`);
//     return;
//   }
//   // g·ª≠i tin nh·∫Øn t·ªõi CMS
//   io.of("/cms").to(cmsSocket).emit("client_message", {
//     clientId,
//     message: msgObj,
//   });
// }

// /**
//  * X√≥a claim
//  */
// async function clearClaim(tenantId, clientId) {
//   const key = clientKey(tenantId, clientId);
//   await redis.hSet(key, {
//     isClaim: 0,
//     cmsId: "",
//   });
// },
// /**
//  * L·∫•y th√¥ng tin claim
//  */
// async function getClaimInfo(tenantId, clientId) {
//   const key = clientKey(tenantId, clientId);
//   const claimInfo = await redis.hGetAll(key);
//   return {
//     isClaim: claimInfo.isClaim === "1",
//     cmsId: claimInfo.cmsId || null,
//   };
// },
// /**
//  * L·∫•y th√¥ng tin c·ªßa client
//  */
// async function getClientInfo(tenantId, clientId) {
//   const key = clientKey(tenantId, clientId);
//   const clientInfo = await redis.hGetAll(key);
//   return {
//     platform: clientInfo.platform || null,
//     wsId: clientInfo.wsId || null,
//     summary: clientInfo.summary || "Summary tr·ªëng",
//     isClaim: clientInfo.isClaim === "1",
//     cmsId: clientInfo.cmsId || null,
//     conversationId: clientInfo.conversationId || null,
//   };
// }

module.exports = {
  ensureClient,
  ensureConversation,
  removeClient,
  hasClient,
  getClientData,
  update,
  gettingClaimed,
  gettingUnclaimed,
  botToClient,
  addOrderIdToClient,
  getAllClients,
  addEscalatedToClient,
  removeEscalatedFromClient,
  getEscalatedRequests,
  // clearClaim,
  // getClaimInfo,
  // getClientInfo
};
