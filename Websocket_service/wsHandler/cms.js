const queueStore = require("../redis/data_structure/redis_Queue");
const waitingPool = require("../redis/data_structure/waiting_pool");
const cms = require("../redis/data_structure/claimed_Client");
const conversation = require("../redis/data_structure/conversation_Store");
const sendToKafka = require("../kafka/sendToKafka");
const client = require("../redis/data_structure/tenant_Client");
//event connect
//event connect
// async function handleCMSConnection(sessionId,tenantId, socketId ) {
//   try {
   
//     console.log(
//       `üßë‚Äçüíº [${tenantId}] CMS connected: ${sessionId}`
//     );
//   } catch (err) {
//     console.error("‚ùå L·ªói trong handleCMSConnection:", err);
//   }
// }

//event claim
async function handleClaim(cmsSocket, clientId, tenantId, sessionId, callback) {
  try {

  const conversationId = await cms.claim(tenantId, sessionId, clientId); // th·ª±c hi·ªán claim

  // check xem mode c·ªßa h·ªôi tho·∫°i n√†y l√† g√¨
    // L·∫•y metadata v√† ki·ªÉm tra null
    const meta = await conversation.getMetaData(tenantId, conversationId);
    if (!meta) {
      throw new Error(`[CLAIM] Kh√¥ng t√¨m th·∫•y metadata cho conversationId: ${conversationId}`);
    }
    const { mode } = meta;
  
  // n·∫øu mode l√† manual th√¨ : ƒë·∫©y tin nh·∫Øn t·ª´ h·ªôi tho·∫°i v√†o h√†ng ƒë·ª£i
  if (mode ==="manual"){
     const queueMessages = await queueStore.getAll(tenantId, clientId); // ƒë·∫©y t·∫•t c·∫£ tin nh·∫Øn trong h√†ng ƒë·ª£i v√†o h·ªôi tho·∫°i n√†y

  // n√™u h√†ng ƒë·ª£i c√≥ tin nh·∫Øn th√¨ g·ª≠i l√™n kafka
  if (queueMessages.length > 0) {
    console.log(
      `[CLAIM] [${tenantId}] N·∫°p ${queueMessages.length} tin nh·∫Øn t·ª´ queue v√†o h·ªôi tho·∫°i`
    );
    let combined_mes = "";
    // h·ª£p c√°c message l·∫°i th√†nh m·ªôt chu·ªói
    for (const rawMsg of queueMessages) {
      const msgObj = JSON.parse(rawMsg);
      await conversation.addMessage(tenantId, conversationId, msgObj);
      combined_mes += (msgObj.text ?? "") + ". ";
    }
    const msgObj = {
      tenantId: tenantId,
      conversationId: conversationId,
      text: combined_mes.trim()
      }
    // g·ª≠i l√™n kafka
    await sendToKafka.sendMessageToLLMmes(
      tenantId,
      conversationId,
      msgObj,
      clientId
    );
    console.log(`[KAFKA] [${tenantId}] Prompt ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn LLM_mes`);
  }
  // x√≥a h√†ng ƒë·ª£i n√†y
  await queueStore.delete(tenantId, clientId);
  }
  // n·∫øu l√† mode auto th√¨ tin nh·∫Øn ƒë·∫øn s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông g·ª≠i LLM r·ªìi n√™n kh√¥ng ph·∫£i l√†m g√¨ c·∫£, ch·ªâ b·ªè kh√°ch n√†y ra kh·ªèi waiting pool th√¥i
  await waitingPool.remove(tenantId, clientId); // x√≥a client n√†y kh·ªèi pool ƒëang ƒë·ª£i

  //l·∫•y lich s·ª≠ h·ªôi tho·∫°i v√† g·ª≠i l√™n cms
  const history = await conversation.getMessages(tenantId, conversationId);
  cmsSocket.emit("conversation_history", {
    clientId,
    history,
  });
  
  console.log(
    `[CLAIM] [${tenantId}] CMS ${sessionId} nh·∫≠n ph·ª• tr√°ch client ${clientId} - ƒë√£ g·ª≠i l·ªãch s·ª≠`
  );
  callback({ success: true }); // g·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng v·ªÅ cho CMS
} catch (err) {
  console.error("‚ùå L·ªói trong handleClaim:", err);
  callback({ success: false, error: err.message }); // g·ª≠i ph·∫£n h·ªìi l·ªói v·ªÅ cho CMS
  return;
  }
}

// event unclaim
async function handleUnclaim(sessionId, tenantId) {
  try{
  const clientId =await cms.unclaim(tenantId, sessionId); // x√≥a entry trong claimedClients
  if (!clientId?.trim()) {
    console.warn(
      `[UNCLAIM] [${tenantId}] ‚ùå CMS ${sessionId} kh√¥ng claim client n√†o`
    );
    return;
  }
  await waitingPool.add(tenantId, clientId);
  await queueStore.initQueue(tenantId, clientId);

    console.log(
    `[UNCLAIM] [${tenantId}] CMS ${sessionId} b·ªè claim client ${clientId}`
  );
  return;
} catch (err) {
  console.error("‚ùå L·ªói trong handleUnclaim:", err);

  return;
}
  }

  //event disconnect
async function handleCMSDisconnect(socket, io) {
  try{
  const sessionId = socket.data.sessionId;
  const tenantId = socket.tenantId;

  const {clientId} = await cms.getCmsDetail(tenantId, sessionId);// l·∫•y clientId ƒë√£ claim

  if (clientId?.trim()) { // n·∫øu c√≥
    await handleUnclaim(socket, io); // c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ ch∆∞a claim
    io.of("/cms").emit(`${tenantId}_waiting_client`, [clientId]); // th√¥ng b√°o cho t·∫•t c·∫£ cms v·ªÅ client n√†y
    console.log(
      `‚ôªÔ∏è [${tenantId}] Client ${clientId} ƒë∆∞·ª£c ƒë∆∞a l·∫°i v√†o h√†ng ƒë·ª£i v√¨ CMS ${sessionId} r·ªõt`
    );
  }

  await cms.clear(tenantId, sessionId); //n·∫øu c√≥ clientId th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ ch∆∞a claim, c·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc tr√≤ chuy·ªán v·ªÅ ch∆∞a claim

  console.log(`‚ùå [${tenantId}] CMS disconnected: ${sessionId}`);
} catch (err) {
  console.error("‚ùå L·ªói trong handleCMSDisconnect:", err);
  socket.emit("error", { error: "L·ªói khi ng·∫Øt k·∫øt n·ªëi CMS." });
  }
}


// event cms_message
async function handleCMSMessage(socket, io, message) {
  try{
  const sessionId = socket.data.sessionId;
  const cmsId = socket.id;
  const tenantId = socket.tenantId;

  // l·∫•y clientId ƒëang ƒë∆∞·ª£c claim
  const {clientId, conversationId} = await cms.getCmsDetail(tenantId, sessionId);

  if (!(clientId?.trim())) {
    console.warn(
      `[CMS_MESSAGE] [${tenantId}] ‚ùå CMS ${sessionId} kh√¥ng claim client n√†o`
    );
    socket.emit("error", { message: "B·∫°n ch∆∞a claim client n√†o." });
    return;
  }

  const msgObj = {
    text: message.text ?? "",
    time: message.time ?? Date.now(),
    role: message.role ?? "cms",  };

  // th√™m tin nh·∫Øn v√†o h·ªôi tho·∫°i
  await conversation.addMessage(tenantId, conversationId, msgObj);
  
  // emit t·ªõi client ƒë√≥
  // check plaform c·ªßa ng∆∞·ªùi d√πng ƒë√≥
  const {platform} = await client.getClientData(tenantId, clientId);
  if(platform== "web"){
      await cms.CMStoClient(io, tenantId, sessionId, msgObj);
       console.log(
    `[CMS_MESSAGE] [${tenantId}] üí¨ CMS ${cmsId} g·ª≠i message ƒë·∫øn client ${clientId}`
  );
      return;
    }
  else if(platform == "facebook"){
    // g·ª≠i tin nh·∫Øn ƒë·∫øn facebook
    console.log(
      `[CMS_MESSAGE] [${tenantId}] G·ª≠i tin nh·∫Øn ƒë·∫øn facebook client ${clientId} : `, {message}
    );
    return;
  }
  else{
    throw new Error(
      `[CMS_MESSAGE] [${tenantId}] ‚ùå Kh√¥ng h·ªó tr·ª£ mode ${platform} cho client ${clientId}`
    );
  }
} catch (err) {
  console.error("‚ùå L·ªói trong handleCMSMessage:", err);
  socket.emit("error", { error: "L·ªói khi g·ª≠i tin nh·∫Øn CMS." });
  return;
  }
}

// event change_mode
async function handleChangeMode(socket,object , callback){
  try {
    // get conversationId t·ª´ clientId
    console.log("handleChangeMode", object);
    const {clientId, mode:rawmode, tenantId} = object;
    const mode = rawmode?.trim(); // chu·∫©n h√≥a mode v·ªÅ ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
    if (!clientId || !mode) {
     throw new Error(`[CHANGE_MODE] [${tenantId}] Thi·∫øu clientId ho·∫∑c mode trong y√™u c·∫ßu`);
    }
    // ki·ªÉm tra mode c√≥ h·ª£p l·ªá kh√¥ng
    const validModes = ["auto", "manual", "offChatbot"];
    if (!validModes.includes(mode)) {
      throw new Error(`[CHANGE_MODE] [${tenantId}] Mode kh√¥ng h·ª£p l·ªá: ${mode}`);
    }
    const {conversationId} = await client.getClientData(tenantId, clientId);
    if (!conversationId) {
      throw new Error(`[CHANGE_MODE] [${tenantId}] Kh√¥ng t√¨m th·∫•y conversationId cho client ${clientId}`);
    }
    // c·∫≠p nh·∫≠t mode trong conversation
    await conversation.setModeToConversationId(tenantId, conversationId, mode);
    callback({ success: true, message: "ƒê√£ c·∫≠p nh·∫≠t mode th√†nh c√¥ng", mode: mode });
    console.log(
      `[CHANGE_MODE] [${tenantId}] ƒê√£ c·∫≠p nh·∫≠t mode cho client ${clientId} th√†nh ${mode}`
    );
  }catch (err) {
   throw new Error(`[CHANGE_MODE] ‚ùå L·ªói khi thay ƒë·ªïi mode: ${err.message}`);
  }
}

// event get client id conversation mode
async function getClientIdConversationMode(tenantId,clientId, callback) {
  try {
    const { mode } = await client.getClientData(tenantId, clientId);
    if ( mode) {
      throw new Error(`[GET_CLIENT_ID] [${tenantId}] Thi·∫øu th√¥ng tin clientId, conversationId ho·∫∑c mode`);
    }
    callback({ success: true, mode: mode });
  } catch (err) {
    throw new Error(`[GET_CLIENT_ID] [${tenantId}] ‚ùå L·ªói khi l·∫•y mode c·ªßa client: ${err.message}`);
  }
}

module.exports = {
  // handleCMSConnection,
  handleUnclaim,
  handleCMSDisconnect,
  handleClaim,
  handleCMSMessage,
  handleChangeMode,
  getClientIdConversationMode
};
